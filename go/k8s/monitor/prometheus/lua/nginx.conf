#user    nobody;
worker_processes  1;

error_log error.log;
pid nginx.pid;

events {
    worker_connections 1024;
}

daemon off;

http {
    # lua-nginx-module directives
    # https://github.com/openresty/lua-nginx-module#directives

    init_by_lua_file "prometheus/init.lua";
    # ';;' is the default path
    lua_package_path "prometheus/?.lua;;";

    # Fetching the shm-based Lua dictionary object for the shared memory zone named DICT defined by the lua_shared_dict directive.
    # https://github.com/openresty/lua-nginx-module#ngxshareddict
    # 10 MB
    lua_shared_dict prometheus_metrics 10m;

    # https://github.com/openresty/lua-nginx-module#lua_code_cache
    # 如果关闭，每一个请求都会在单独的 Lua VM 里执行
    lua_code_cache on;

    # Docker标准格式
    #log_format docker_nginx
     #   '$remote_addr\t$http_x_forwarded_for\t$http_x_real_ip\t$remote_user\t[$time_iso8601]\t'
      #  '"$request"\t$status\t$body_bytes_sent\t"$http_referer"\t"$http_user_agent"\t"$gzip_ratio"\t'
       # '$upstream_response_time\t$request_time\t$request_length\t$scheme\t$host\t$server_port';
    log_format docker '$remote_addr-$remote_user[$time_local] "$request" $status $bytes_sent $request_length';

    include mime.types;

    server {
        access_log access.log;

        listen 8001;
        location /metrics {
            default_type text/plain;

            # 读监控 metrics
            content_by_lua_block {
               require("prometheus.wrapper"):metrics()
            }
        }
    }

    server {
        root .;
        access_log access.log docker;

        listen 80 default_server;

        location ~* /(.*)\.(js|ico|gif|jpg|jpeg|png|css|php|xml|txt|html|swf|htm|cur)$ {
            # root "/var/www/html";
            try_files $uri $uri/;
        }

        location / {
            default_type text/plain;

            # 写监控 metrics
            log_by_lua_block {
               require("prometheus.wrapper"):log()
            }
        }
    }
}
